% =========================================================================
% 1-D Simulation of Transport and Fate of BTEX 
% Hannah McNeil and Nicole Smith
% University of Tübingen
%
% December, 2018 
% =========================================================================

clear all

DirectoryPath ='C:\Users\Kita\Documents\GitHub\Figures';

% Transport Coefficients
m_tot = 8000;       % total mass of NAPL [kg]
c_in = 8;           % Dissolved oxygen inflow concentration [mg/L]
MW_O = 32;          % Molar mass of oxygen [mol/g]
c_in = c_in./MW_O;  % Dissolved oxygen inflow concentration [mol/m3]

L = 10;             % length of aquifer [m] 
W = 20;             % width of aquifer [m]
H = 2;              % depth [m] 
poros = 0.35;       % porosity [-]
q = 1;              % Specific Discharge [m/day]
q = q./(3600.*24);  % Specific Discharge [m/s]
alpha = 0.01;       % Longitudinal Dispersivity [m]
Dp = 1e-9;          % pore diffusion coefficient [m2/s] -- assumed

tin = 0;            % begin time [s]
te = 3600*(24*365*25);  % end time [s]

% Derived Coefficients
A = H*W;            % area [m2]
v = q/poros;        % seepage velocity [m/s]
D = alpha*v+Dp;     % dispersion coefficient [m2/s]

% Load individual gasoline component data 
% Compounds         % compound names for legend
% rho               % density [kg/m3]
% MW                % molecular weight [kg/mol]
% Si                % solubility constants at 20-25 C [kg/m3]
% wt                % weight percent in initial mixture [fraction]ans
[compound, rho, MW, Si, wt, carbon, fcfb, fcfa, fbfa] = BTEX_data();

% Requirement 1: Neumann-Number = 1/4
% Requirement 2: Courant-Number Cr = dt*v/dx = 1
% Solve for dx:
dx = 4*D/v;
% Solve for dt
dt = dx/v;

x=0.5*dx:dx:L;
nx = length(x);

% Number of Components [given compounds + oxygen] 
ncomp = 25;

% Matrix of Initial NAPL moles - Compound
% Rows related to length coordinates
% Columns related to components
n = wt*m_tot./(MW*nx);      % moles of each compound in initial mixture [mol] per cell
Xo = n./sum(n);             % molar fraction [-]
n_napl = repmat(n,nx,1);    % moles of each compound over whole domain

% Matrix of Aqueous Concentrations - Compound and Oxygen
c_aq_i = [Xo.*Si,0];         % initial water conc. at equilibrium  [mol/m3]
c_aq = repmat(c_aq_i,nx,1);  % water conc over entire domain
c_aq_i = c_aq;               % set initial water conc as matrix over domain

% Matrix of Inflow Concentrations - Compound and Oxygen 
% Columns related to components
c_in = [zeros(1,ncomp-1), c_in];

% initialize breakthrough curve
BTC=zeros(0,ncomp);

% Open figure and delete its content
figure(1);clf

% Open video 
% v = VideoWriter('transport_model.avi');
% open(v);

ctr=1;
% =========================================================================
% Loop over all timepoints
% =========================================================================
for t=dt:dt:te
    BTC=[BTC;c_aq(end,:)];
    
    % =====================================================================
    % ADVECTION
    % =====================================================================
    % Advection with ability to change dt to be lower than the Courant 
    % number. Concentrations fluxes occur at cell boundaries. 
    % The first box receives the inflow concentration.

    c_aq(2:end,:)= c_aq(2:end,:) + dt*(v/dx)*(c_aq(1:end-1,:) - c_aq(2:end,:));    
    c_aq(1,:)= c_aq(1,:) + dt*(v/dx)*(c_in - c_aq(1,:));
    
    % =====================================================================
    % DISPERSION
    % =====================================================================
    
    % Calculation of dispersive fluxes at the interior interfaces
    Jd=(c_aq(1:end-1,:)-c_aq(2:end,:))/dx*D;
    
    % add a dispersive flux of zero at the inflow boundary and assume that
    % the dispersive flux at the outflow is identical to that at the last
    % internal interface
    Jd =[zeros(1,ncomp);Jd;Jd(end,:)];
    
    % concentration change due to divergence of dispersive flux 
    c_aq = c_aq + dt/dx*(Jd(1:end-1,:)-Jd(2:end,:));
    
    % =====================================================================
    % EQUILIBRATION
    % =====================================================================
    
    [c_aq(:,1:24),n_napl] = equilibrate(c_aq(:,1:24), n_napl, poros, Si, rho, MW, dx, A);
    
    % =====================================================================
    % REACTION
    % =====================================================================
    
    [c_aq, n_napl] = degrade(c_aq, n_napl, fcfb, fcfa, fbfa, poros, Si, rho, MW, dx, A);
    
    % =====================================================================
    % GRAPHICAL OUTPUT
    % =====================================================================
    
    % Color for plots 
    co = color();
    set(groot,'defaultAxesColorOrder',co);
    set(0, 'DefaultLineLineWidth', 2);
    set(gca,'DefaultTextFontSize',18);
    
%    Graphical output every 10 minutes
    if mod(ctr,6498)==0
        figure(1)
        plot(x,c_aq./[c_aq_i(1,1:24),c_in(:,25)]);
        xlabel('Distance [m]');
        ylabel('Normalized Concentration c/c_0 [-]');
        legend(compound, 'Location', 'eastoutside')
        title(sprintf('Concentration Distribution, t =%6.1f years',t/(3600.*24.*365)));
        drawnow
        whereToStore=fullfile(DirectoryPath,['Concentration Distribution - 50 Years_' num2str(ctr) '.jpeg']);
        saveas(gcf, whereToStore);
    end
    % Graphical video 
%         frame = getframe(gcf);
%         writeVideo(v,frame)

    ctr=ctr+1;      % Counter to control frames output 
end

% End video 
% close(v) 


% Plotting of breakthrough curves
% Individual subplots for hydrocarbon type 

% Alkane subplot 
set(groot,'defaultAxesColorOrder',co([1:8,25],:))
figure(2)
subplot(2,2,1)
plot([dt:dt:te]/(3600.*24.*365),BTC(:,[1:8,25])./[c_aq_i(1,1:8),c_in(:,25)])
% plot([dt:dt:te]/3600,BTC(:,[1:8,25]))
xlabel('t [years]')
ylabel('c/c_0 [-]')
legend(compound(:,[1:8,25]), 'Location', 'eastoutside')
title('Breakthrough Curve - Alkanes')

% Alkene subplot
set(groot,'defaultAxesColorOrder',co([9:15,25],:))
subplot(2,2,2)
plot([dt:dt:te]/(3600.*24.*365),BTC(:,[9:15,25])./[c_aq_i(1,9:15),c_in(:,25)])
xlabel('t [years]')
ylabel('c/c_0 [-]')
legend(compound(:,[9:15,25]), 'Location', 'eastoutside')
title('Breakthrough Curve - Alkenes')

% BTEX subplot 
set(groot,'defaultAxesColorOrder',co([16:19,25],:))
subplot(2,2,3)
plot([dt:dt:te]/(3600.*24.*365),BTC(:,[16:19,25])./[c_aq_i(1,16:19),c_in(:,25)])
xlabel('t [years]')
ylabel('c/c_0 [-]')
legend(compound(:,[16:19,25]), 'Location', 'eastoutside')
title('Breakthrough Curve - BTEX')

% Additive subplot 
set(groot,'defaultAxesColorOrder',co([20:25],:))
subplot(2,2,4)
plot([dt:dt:te]/(3600.*24.*365),BTC(:,20:25)./[c_aq_i(1,20:24),c_in(:,25)])
xlabel('t [years]')
ylabel('c/c_0 [-]')
legend(compound(:,20:25), 'Location', 'eastoutside')
title('Breakthrough Curve - Additives')
save('data.mat');
  
filename=fullfile(DirectoryPath,['Breakthrough Curve_50 Years.jpeg']);
saveas(gcf, filename);